"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[491],{2257:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>t,contentTitle:()=>i,default:()=>m,frontMatter:()=>d,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"data-structures/array","title":"Array","description":"Array","source":"@site/docs/data-structures/array.md","sourceDirName":"data-structures","slug":"/data-structures/array","permalink":"/brain/docs/data-structures/array","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/data-structures/array.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Estruturas de Dados","permalink":"/brain/docs/data-structures/"},"next":{"title":"Binary Tree (\xc1rvore Bin\xe1ria)","permalink":"/brain/docs/data-structures/binary-tree/"}}');var s=a(4848),n=a(8453);const d={},i="Array",t={},c=[{value:"Array",id:"array-1",level:2},{value:"Array em Rust",id:"array-em-rust",level:2},{value:"Array em JavaScript",id:"array-em-javascript",level:2},{value:"Array em Python",id:"array-em-python",level:2},{value:"Array em C++",id:"array-em-c",level:2}];function l(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"array",children:"Array"})}),"\n",(0,s.jsx)(r.h2,{id:"array-1",children:"Array"}),"\n",(0,s.jsxs)(r.p,{children:["Um array \xe9 uma cole\xe7\xe3o de itens armazenados em locais cont\xedguos de mem\xf3ria. A ideia \xe9 armazenar m\xfaltiplos itens do mesmo tipo juntos. Isso torna mais f\xe1cil calcular a posi\xe7\xe3o de cada elemento simplesmente adicionando um deslocamento a um valor base, ou seja, o local de mem\xf3ria do primeiro elemento do array (geralmente indicado pelo nome do array).\nPor exemplo, em um array ",(0,s.jsx)(r.code,{children:"arr"})," de tamanho 5, podemos calcular o local de mem\xf3ria de cada elemento ",(0,s.jsx)(r.code,{children:"arr[i]"})," usando a seguinte f\xf3rmula:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"location(arr[i]) = base_value + i * size_of_element\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Aqui, ",(0,s.jsx)(r.code,{children:"base_value"})," \xe9 o local de mem\xf3ria do primeiro elemento do array ",(0,s.jsx)(r.code,{children:"arr"}),", que \xe9 ",(0,s.jsx)(r.code,{children:"location(arr[0])"}),". O tamanho de cada elemento \xe9 o mesmo, que \xe9 o tamanho do tipo de dado usado para armazenar os elementos."]}),"\n",(0,s.jsx)(r.h2,{id:"array-em-rust",children:"Array em Rust"}),"\n",(0,s.jsxs)(r.p,{children:["Em Rust, arrays s\xe3o cole\xe7\xf5es de elementos do mesmo tipo com tamanho fixo. O tamanho de um array \xe9 determinado em tempo de compila\xe7\xe3o e n\xe3o pode ser alterado. Arrays s\xe3o declarados usando colchetes ",(0,s.jsx)(r.code,{children:"[]"})," e especificando o tipo dos elementos e o n\xfamero de elementos no array. Por exemplo, o c\xf3digo a seguir declara um array de 5 inteiros:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",children:"let arr: [i32; 5] = [1, 2, 3, 4, 5];\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Aqui, ",(0,s.jsx)(r.code,{children:"arr"})," \xe9 um array de 5 inteiros. O tipo do array \xe9 ",(0,s.jsx)(r.code,{children:"[i32; 5]"}),", que significa um array de 5 inteiros. Os elementos do array s\xe3o inicializados com os valores 1, 2, 3, 4 e 5."]}),"\n",(0,s.jsx)(r.h2,{id:"array-em-javascript",children:"Array em JavaScript"}),"\n",(0,s.jsxs)(r.p,{children:["Em JavaScript, arrays s\xe3o cole\xe7\xf5es din\xe2micas de elementos do mesmo tipo. O tamanho de um array n\xe3o \xe9 fixo e pode ser alterado em tempo de execu\xe7\xe3o. Arrays s\xe3o declarados usando colchetes ",(0,s.jsx)(r.code,{children:"[]"})," e especificando os elementos do array. Por exemplo, o c\xf3digo a seguir declara um array de 5 inteiros:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"let arr = [1, 2, 3, 4, 5];\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Aqui, ",(0,s.jsx)(r.code,{children:"arr"})," \xe9 um array de 5 inteiros. Os elementos do array s\xe3o inicializados com os valores 1, 2, 3, 4 e 5."]}),"\n",(0,s.jsx)(r.h2,{id:"array-em-python",children:"Array em Python"}),"\n",(0,s.jsxs)(r.p,{children:["Em Python, arrays s\xe3o cole\xe7\xf5es din\xe2micas de elementos do mesmo tipo. O tamanho de um array n\xe3o \xe9 fixo e pode ser alterado em tempo de execu\xe7\xe3o. Arrays s\xe3o declarados usando colchetes ",(0,s.jsx)(r.code,{children:"[]"})," e especificando os elementos do array. Por exemplo, o c\xf3digo a seguir declara um array de 5 inteiros:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"arr = [1, 2, 3, 4, 5]\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Aqui, ",(0,s.jsx)(r.code,{children:"arr"})," \xe9 um array de 5 inteiros. Os elementos do array s\xe3o inicializados com os valores 1, 2, 3, 4 e 5."]}),"\n",(0,s.jsx)(r.h2,{id:"array-em-c",children:"Array em C++"}),"\n",(0,s.jsxs)(r.p,{children:["Em C++, arrays s\xe3o cole\xe7\xf5es de elementos do mesmo tipo com tamanho fixo. O tamanho de um array \xe9 determinado em tempo de compila\xe7\xe3o e n\xe3o pode ser alterado. Arrays s\xe3o declarados usando colchetes ",(0,s.jsx)(r.code,{children:"[]"})," e especificando o tipo dos elementos e o n\xfamero de elementos no array. Por exemplo, o c\xf3digo a seguir declara um array de 5 inteiros:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"int arr[5] = {1, 2, 3, 4, 5};\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Aqui, ",(0,s.jsx)(r.code,{children:"arr"})," \xe9 um array de 5 inteiros. O tipo do array \xe9 ",(0,s.jsx)(r.code,{children:"int[5]"}),", que significa um array de 5 inteiros. Os elementos do array s\xe3o inicializados com os valores 1, 2, 3, 4 e 5."]})]})}function m(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,r,a)=>{a.d(r,{R:()=>d,x:()=>i});var o=a(6540);const s={},n=o.createContext(s);function d(e){const r=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),o.createElement(n.Provider,{value:r},e.children)}}}]);