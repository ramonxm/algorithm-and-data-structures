"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[981],{820:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>t});const a=JSON.parse('{"id":"data-structures/binary-tree/index","title":"Binary Tree (\xc1rvore Bin\xe1ria)","description":"Uma Binary Tree (\xc1rvore Bin\xe1ria) \xe9 uma estrutura de dados hier\xe1rquica onde cada n\xf3 pode ter no m\xe1ximo dois filhos, geralmente referidos como filho esquerdo e filho direito.","source":"@site/docs/data-structures/binary-tree/index.md","sourceDirName":"data-structures/binary-tree","slug":"/data-structures/binary-tree/","permalink":"/brain/docs/data-structures/binary-tree/","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/data-structures/binary-tree/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Array","permalink":"/brain/docs/data-structures/array"},"next":{"title":"Queue (Fila)","permalink":"/brain/docs/data-structures/queue/"}}');var o=r(4848),i=r(8453);const s={},l="Binary Tree (\xc1rvore Bin\xe1ria)",d={},t=[{value:"Caracter\xedsticas Principais",id:"caracter\xedsticas-principais",level:2},{value:"Implementa\xe7\xe3o em Kotlin",id:"implementa\xe7\xe3o-em-kotlin",level:2},{value:"M\xe9todos",id:"m\xe9todos",level:2},{value:"insert(value: T)",id:"insertvalue-t",level:3},{value:"search(value: T): Boolean",id:"searchvalue-t-boolean",level:3},{value:"inorderTraversal()",id:"inordertraversal",level:3},{value:"Exemplo de Uso",id:"exemplo-de-uso",level:2},{value:"Complexidade de Tempo",id:"complexidade-de-tempo",level:2},{value:"Casos de Uso",id:"casos-de-uso",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"binary-tree-\xe1rvore-bin\xe1ria",children:"Binary Tree (\xc1rvore Bin\xe1ria)"})}),"\n",(0,o.jsx)(n.p,{children:"Uma Binary Tree (\xc1rvore Bin\xe1ria) \xe9 uma estrutura de dados hier\xe1rquica onde cada n\xf3 pode ter no m\xe1ximo dois filhos, geralmente referidos como filho esquerdo e filho direito."}),"\n",(0,o.jsx)(n.h2,{id:"caracter\xedsticas-principais",children:"Caracter\xedsticas Principais"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Cada n\xf3 tem no m\xe1ximo dois filhos"}),"\n",(0,o.jsx)(n.li,{children:"O primeiro n\xf3 \xe9 chamado de raiz (root)"}),"\n",(0,o.jsx)(n.li,{children:"N\xf3s sem filhos s\xe3o chamados de folhas"}),"\n",(0,o.jsx)(n.li,{children:"Cada n\xf3 cont\xe9m um valor e refer\xeancias para seus filhos"}),"\n",(0,o.jsx)(n.li,{children:"Pode ser implementada de forma recursiva"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"implementa\xe7\xe3o-em-kotlin",children:"Implementa\xe7\xe3o em Kotlin"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'class BinaryTree<T : Comparable<T>> {\n  data class Node<T>(var value: T,\n                     var left: Node<T>? = null,\n                     var right: Node<T>? = null)\n\n  private var root: Node<T>? = null\n\n  fun insert(value: T) {\n    root = insertRec(root, value)\n  }\n\n  private fun insertRec(node: Node<T>?, value: T): Node<T> {\n    if (node == null) {\n      return Node(value)\n    }\n\n    when {\n      value < node.value -> node.left = insertRec(node.left, value)\n      value > node.value -> node.right = insertRec(node.right, value)\n      else -> return node // Valor j\xe1 existe\n    }\n\n    return node\n  }\n\n  fun search(value: T): Boolean {\n    return searchRec(root, value)\n  }\n\n  private fun searchRec(node: Node<T>?, value: T): Boolean {\n    if (node == null) {\n      return false\n    }\n\n    return when {\n      value == node.value -> true\n      value < node.value -> searchRec(node.left, value)\n      else -> searchRec(node.right, value)\n    }\n  }\n\n  fun inorderTraversal() {\n    inorderRec(root)\n    println()\n  }\n\n  private fun inorderRec(node: Node<T>?) {\n    if (node != null) {\n      inorderRec(node.left)\n      print("${node.value} ")\n      inorderRec(node.right)\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"m\xe9todos",children:"M\xe9todos"}),"\n",(0,o.jsx)(n.h3,{id:"insertvalue-t",children:"insert(value: T)"}),"\n",(0,o.jsx)(n.p,{children:"Insere um novo valor na \xe1rvore mantendo a propriedade de ordena\xe7\xe3o."}),"\n",(0,o.jsx)(n.h3,{id:"searchvalue-t-boolean",children:"search(value: T): Boolean"}),"\n",(0,o.jsx)(n.p,{children:"Procura um valor na \xe1rvore e retorna true se encontrado."}),"\n",(0,o.jsx)(n.h3,{id:"inordertraversal",children:"inorderTraversal()"}),"\n",(0,o.jsx)(n.p,{children:"Percorre a \xe1rvore em ordem (esquerda, raiz, direita) e imprime os valores."}),"\n",(0,o.jsx)(n.h2,{id:"exemplo-de-uso",children:"Exemplo de Uso"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'fun main() {\n  val tree = BinaryTree<Int>()\n  \n  // Inserindo valores\n  tree.insert(5)\n  tree.insert(3)\n  tree.insert(7)\n  tree.insert(1)\n  tree.insert(9)\n\n  // Percorrendo a \xe1rvore em ordem\n  println("Valores em ordem:")\n  tree.inorderTraversal()\n\n  // Buscando valores\n  println("Busca pelo valor 7: ${tree.search(7)}")\n  println("Busca pelo valor 4: ${tree.search(4)}")\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"complexidade-de-tempo",children:"Complexidade de Tempo"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Inser\xe7\xe3o: O(h) - onde h \xe9 a altura da \xe1rvore"}),"\n",(0,o.jsx)(n.li,{children:"Busca: O(h)"}),"\n",(0,o.jsx)(n.li,{children:"Percurso em ordem: O(n) - onde n \xe9 o n\xfamero de n\xf3s"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Para uma \xe1rvore balanceada, h = log(n), resultando em:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Inser\xe7\xe3o: O(log n)"}),"\n",(0,o.jsx)(n.li,{children:"Busca: O(log n)"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"casos-de-uso",children:"Casos de Uso"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Implementa\xe7\xe3o de bancos de dados indexados"}),"\n",(0,o.jsx)(n.li,{children:"Sistemas de arquivos"}),"\n",(0,o.jsx)(n.li,{children:"Express\xf5es matem\xe1ticas"}),"\n",(0,o.jsx)(n.li,{children:"Compress\xe3o de dados (\xc1rvores de Huffman)"}),"\n",(0,o.jsx)(n.li,{children:"Implementa\xe7\xe3o de conjuntos e mapas ordenados"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>l});var a=r(6540);const o={},i=a.createContext(o);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);