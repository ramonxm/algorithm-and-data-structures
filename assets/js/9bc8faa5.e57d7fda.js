"use strict";(self.webpackChunkbrain=self.webpackChunkbrain||[]).push([[10],{6726:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"concepts/big-o-notation","title":"Nota\xe7\xe3o Big O","description":"Big O fala sobre como os algoritmos ESCALAM dependendo do tamanho da entrada, e n\xe3o necessariamente sobre o desempenho do algoritmo.","source":"@site/docs/concepts/big-o-notation.md","sourceDirName":"concepts","slug":"/concepts/big-o-notation","permalink":"/brain/docs/concepts/big-o-notation","draft":false,"unlisted":false,"editUrl":"https://github.com/ramonxm/brain/tree/main/docs/concepts/big-o-notation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Conceitos Fundamentais","permalink":"/brain/docs/concepts/"},"next":{"title":"FIFO (First In, First Out)","permalink":"/brain/docs/concepts/fifo"}}');var r=o(4848),a=o(8453);const i={},d="Nota\xe7\xe3o Big O",l={},c=[{value:"Big O <strong>fala sobre como os algoritmos ESCALAM</strong> dependendo do <strong>tamanho</strong> da <strong>entrada</strong>, e <strong>n\xe3o</strong> necessariamente sobre o <strong>desempenho</strong> do <strong>algoritmo</strong>.",id:"big-o-fala-sobre-como-os-algoritmos-escalam-dependendo-do-tamanho-da-entrada-e-n\xe3o-necessariamente-sobre-o-desempenho-do-algoritmo",level:3},{value:"Big O pode ser usado para medir tanto a <em>complexidade de tempo</em> quanto a <em>complexidade de espa\xe7o</em> de um algoritmo.",id:"big-o-pode-ser-usado-para-medir-tanto-a-complexidade-de-tempo-quanto-a-complexidade-de-espa\xe7o-de-um-algoritmo",level:3},{value:"<strong>O(1) \u2013 Complexidade Constante \u2192</strong>",id:"o1--complexidade-constante-",level:2},{value:"<strong>O(log n) \u2013 Complexidade Logar\xedtmica \u2192</strong>",id:"olog-n--complexidade-logar\xedtmica-",level:2},{value:"<strong>O(n) \u2013 Complexidade Linear \u2192</strong>",id:"on--complexidade-linear-",level:2},{value:"<strong>O(n log n) \u2013 Complexidade Quasilinear \u2192</strong>",id:"on-log-n--complexidade-quasilinear-",level:2},{value:"<strong>O(n\xb2) \u2013 Complexidade Quadr\xe1tica \u2192</strong>",id:"on--complexidade-quadr\xe1tica-",level:2},{value:"<strong>O(2\u207f) \u2013 Complexidade Exponencial \u2192</strong>",id:"o2\u207f--complexidade-exponencial-",level:2},{value:"<strong>O(\u221an) \u2013 Complexidade de Raiz Quadrada \u2192</strong>",id:"on--complexidade-de-raiz-quadrada-",level:2}];function t(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"nota\xe7\xe3o-big-o",children:"Nota\xe7\xe3o Big O"})}),"\n",(0,r.jsxs)(n.h3,{id:"big-o-fala-sobre-como-os-algoritmos-escalam-dependendo-do-tamanho-da-entrada-e-n\xe3o-necessariamente-sobre-o-desempenho-do-algoritmo",children:["Big O ",(0,r.jsx)(n.strong,{children:"fala sobre como os algoritmos ESCALAM"})," dependendo do ",(0,r.jsx)(n.strong,{children:"tamanho"})," da ",(0,r.jsx)(n.strong,{children:"entrada"}),", e ",(0,r.jsx)(n.strong,{children:"n\xe3o"})," necessariamente sobre o ",(0,r.jsx)(n.strong,{children:"desempenho"})," do ",(0,r.jsx)(n.strong,{children:"algoritmo"}),"."]}),"\n",(0,r.jsxs)("aside",{children:[(0,r.jsx)(n.p,{children:"\ud83d\udca1"}),(0,r.jsxs)(n.p,{children:["\xc9 uma forma de ",(0,r.jsx)(n.strong,{children:"denotar o desempenho do algoritmo"}),", mas ",(0,r.jsx)(n.strong,{children:"n\xe3o"})," \xe9 uma ",(0,r.jsx)(n.strong,{children:"medida de desempenho"})]})]}),"\n",(0,r.jsxs)("aside",{children:[(0,r.jsx)(n.p,{children:"\ud83d\udca1"}),(0,r.jsxs)(n.p,{children:["Big O ",(0,r.jsx)(n.strong,{children:"n\xe3o mede o tempo exato de execu\xe7\xe3o"})," de um algoritmo, mas sim ",(0,r.jsx)(n.strong,{children:"como o tempo cresce"})," conforme o tamanho da entrada aumenta. \ud83d\udcc8"]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"big-o-pode-ser-usado-para-medir-tanto-a-complexidade-de-tempo-quanto-a-complexidade-de-espa\xe7o-de-um-algoritmo",children:["Big O pode ser usado para medir tanto a ",(0,r.jsx)(n.em,{children:"complexidade de tempo"})," quanto a ",(0,r.jsx)(n.em,{children:"complexidade de espa\xe7o"})," de um algoritmo."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Complexidade de Tempo"}),": Relaciona-se ao tempo de execu\xe7\xe3o (runtime), ou seja, quanto tempo leva para executar. ",(0,r.jsx)(n.strong,{children:"Mais comum em entrevistas"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Complexidade de Espa\xe7o"}),": Relaciona-se a quanto de mem\xf3ria adicional precisamos alocar"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"an\xe1lise assint\xf3tica"})," \xe9 a forma de analisar como um algoritmo se comporta em termos de tempo e mem\xf3ria conforme o tamanho da entrada cresce."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h1,{id:"principais-nota\xe7\xf5es-do-big-o",children:"Principais nota\xe7\xf5es do BIG O:"}),"\n",(0,r.jsx)(n.h2,{id:"o1--complexidade-constante-",children:(0,r.jsx)(n.strong,{children:"O(1) \u2013 Complexidade Constante \u2192"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:'"Acender uma luz com um interruptor \u2013 sempre leva o mesmo tempo, independente do tamanho da casa."'})}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83e\udde0 Explicado usando a T\xe9cnica Feynman"})}),"\n",(0,r.jsxs)(n.p,{children:["Imagine que voc\xea tem uma caixa de objetos e precisa encontrar um item espec\xedfico nela. Agora, em vez de procurar em cada item da caixa, voc\xea j\xe1 sabe exatamente onde ele est\xe1. Ao abrir a caixa, voc\xea vai diretamente ao item certo, sem precisar verificar nada mais.\nO tempo que voc\xea leva para encontrar o item \xe9 o mesmo, n\xe3o importa quantos itens estejam na caixa. Isso \xe9 o que acontece com a complexidade ",(0,r.jsx)(n.strong,{children:"O(1)"}),".\nIndependentemente do tamanho da entrada, o tempo de execu\xe7\xe3o do algoritmo \xe9 constante."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"O(1)"})," \xe9 complexidade constante, significando que o tempo de execu\xe7\xe3o do algoritmo n\xe3o depende do tamanho da entrada. Independentemente de quantos elementos existam, o tempo ou mem\xf3ria consumidos s\xe3o os mesmos."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83e\uddd0 Exemplo Pr\xe1tico"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Acessar o primeiro elemento de um array: ",(0,r.jsx)(n.code,{children:"arr[0]"})]}),"\n",(0,r.jsxs)(n.li,{children:["Verificar se um n\xfamero \xe9 par: ",(0,r.jsx)(n.code,{children:"num % 2 == 0"})]}),"\n",(0,r.jsx)(n.li,{children:"Inserir ou remover um item do topo de uma pilha"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u23f0 Sobre Complexidade Temporal"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Tempo constante"}),", significando que independentemente do tamanho da entrada, o algoritmo tem o mesmo tempo de execu\xe7\xe3o."]}),"\n",(0,r.jsx)(n.p,{children:"O tempo de execu\xe7\xe3o n\xe3o muda, seja o tamanho da entrada pequeno ou grande. O algoritmo sempre leva o mesmo tempo para executar."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u23f0 Exemplos de O(1) \u2013 Tempo"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Acessar um \xedndice espec\xedfico do array \u2192 ",(0,r.jsx)(n.em,{children:"arr[0]"})]}),"\n",(0,r.jsxs)(n.li,{children:["Verificar se um n\xfamero \xe9 par \u2192 ",(0,r.jsx)(n.em,{children:"num % 2 == 0"})]}),"\n",(0,r.jsx)(n.li,{children:"Inserir/remover um elemento no topo de uma pilha"}),"\n",(0,r.jsxs)(n.li,{children:["Exemplo de algoritmos O(1) \u2192","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Encontrar o primeiro elemento de um array"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83d\udc69\ud83c\udffc\u200d\ud83d\ude80 Sobre Complexidade Espacial"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mem\xf3ria constante"}),", significando que o espa\xe7o alocado n\xe3o cresce com a entrada."]}),"\n",(0,r.jsx)(n.p,{children:"O espa\xe7o de mem\xf3ria tamb\xe9m n\xe3o varia com o tamanho da entrada. O algoritmo usa a mesma quantidade de mem\xf3ria independentemente do n\xfamero de elementos."}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udcbe ",(0,r.jsx)(n.strong,{children:"Exemplos de O(1) \u2013 Mem\xf3ria"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Criar uma vari\xe1vel e armazenar um valor fixo (int x = 10;)"}),"\n",(0,r.jsx)(n.li,{children:"Trocar valores de duas vari\xe1veis (a, b = b, a)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83d\udd0d Como identificar se \xe9 O(1)?"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Como identificar"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:["Se o algoritmo realiza uma \xfanica opera\xe7\xe3o, independentemente do tamanho da entrada, \xe9 ",(0,r.jsx)(n.strong,{children:"O(1)"}),". Em outras palavras, o n\xfamero de passos para completar a tarefa n\xe3o muda com o aumento da entrada."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exemplo"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Se voc\xea acessa um elemento do array diretamente, como ",(0,r.jsx)(n.code,{children:"arr[5]"}),", ou troca valores de duas vari\xe1veis, o tempo para essas opera\xe7\xf5es \xe9 constante."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"olog-n--complexidade-logar\xedtmica-",children:(0,r.jsx)(n.strong,{children:"O(log n) \u2013 Complexidade Logar\xedtmica \u2192"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:'"Encontrar um nome na lista telef\xf4nica dividindo as p\xe1ginas ao meio a cada vez."'})}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83e\udde0 Explicado usando a T\xe9cnica Feynman"})}),"\n",(0,r.jsxs)(n.p,{children:["Imagine que voc\xea tem um livro com ",(0,r.jsx)(n.strong,{children:"1.000 p\xe1ginas"})," e quer encontrar uma palavra espec\xedfica. Se voc\xea folhear p\xe1gina por p\xe1gina, do in\xedcio ao fim, poderia levar muito tempo (O(n))."]}),"\n",(0,r.jsxs)(n.p,{children:["Agora, imagine um m\xe9todo mais inteligente: ",(0,r.jsx)(n.strong,{children:"voc\xea abre o livro no meio"})," e v\xea se a palavra est\xe1 antes ou depois daquela p\xe1gina. Se estiver antes, voc\xea ignora a metade de tr\xe1s e olha apenas a metade da frente. Se estiver depois, ignora a metade da frente e foca na metade de tr\xe1s."]}),"\n",(0,r.jsx)(n.p,{children:"Repita este processo, cortando o problema pela metade a cada passo. Em muito poucos passos, voc\xea encontra a palavra! \ud83c\udfaf"}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udd22 ",(0,r.jsx)(n.strong,{children:"Isso \xe9 O(log n)"})," \u2192 Em vez de processar ",(0,r.jsx)(n.strong,{children:"todos"})," os elementos, voc\xea reduz drasticamente a quantidade de verifica\xe7\xf5es."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83e\uddd0 Exemplo Pr\xe1tico"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Voc\xea tem um array ordenado e quer encontrar um n\xfamero."}),"\n",(0,r.jsxs)(n.li,{children:["Comece olhando o meio:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Se for o n\xfamero que procuramos, fim! \ud83c\udf89"}),"\n",(0,r.jsx)(n.li,{children:"Se o n\xfamero for menor, olhamos apenas a metade da esquerda."}),"\n",(0,r.jsx)(n.li,{children:"Se for maior, olhamos apenas a metade da direita."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Em cada passo, cortamos o problema pela ",(0,r.jsx)(n.strong,{children:"metade"})," at\xe9 encontrar o resultado."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u23f0 Sobre Complexidade Temporal"})}),"\n",(0,r.jsxs)(n.p,{children:["O tempo de execu\xe7\xe3o cresce muito mais devagar \xe0 medida que o tamanho da entrada aumenta, em compara\xe7\xe3o com algoritmos ",(0,r.jsx)(n.strong,{children:"O(n)"})," ou ",(0,r.jsx)(n.strong,{children:"O(n\xb2)"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["\u23f0 ",(0,r.jsx)(n.strong,{children:"Exemplos de O(log n) - Temporal"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Busca bin\xe1ria"}),": A cada itera\xe7\xe3o, o n\xfamero de elementos poss\xedveis \xe9 reduzido pela metade."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Encontrar o elemento no meio de uma lista ordenada"})," e eliminar metade das op\xe7\xf5es em cada itera\xe7\xe3o."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83d\udc69\ud83c\udffc\u200d\ud83d\ude80 Sobre Complexidade Espacial"})}),"\n",(0,r.jsxs)(n.p,{children:["A mem\xf3ria utilizada por um algoritmo ",(0,r.jsx)(n.strong,{children:"O(log n)"})," tamb\xe9m cresce de forma logar\xedtmica em rela\xe7\xe3o ao tamanho da entrada. Isso significa que, mesmo que o n\xfamero de elementos cres\xe7a, o espa\xe7o utilizado por cada opera\xe7\xe3o n\xe3o aumenta drasticamente."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83d\udc69\ud83c\udffc\u200d\ud83d\ude80 Exemplos de O(log n) - Espacial"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recurs\xe3o em busca bin\xe1ria"}),", onde a pilha de chamadas cresce logaritmicamente \xe0 medida que o tamanho da entrada diminui."]}),"\n",(0,r.jsxs)(n.li,{children:["Algoritmos de ",(0,r.jsx)(n.strong,{children:"divis\xe3o e conquista"})," podem precisar de espa\xe7o extra para armazenar subproblemas, mas o espa\xe7o usado n\xe3o cresce linearmente."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83d\udd0d Como identificar se \xe9 O(log n)?"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Como identificar"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:["Se voc\xea perceber que, a cada passo, o tamanho do problema diminui significativamente \u2014 por exemplo, sempre pela metade \u2014 o algoritmo provavelmente tem complexidade ",(0,r.jsx)(n.strong,{children:"O(log n)"}),". Isso acontece porque o n\xfamero de itera\xe7\xf5es necess\xe1rias cresce muito mais devagar do que o tamanho da entrada."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exemplo"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Se voc\xea est\xe1 dividindo o problema pela metade a cada itera\xe7\xe3o, como em uma busca bin\xe1ria, o tempo de execu\xe7\xe3o ser\xe1 ",(0,r.jsx)(n.strong,{children:"O(log n)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Quando o algoritmo realiza uma busca ou divis\xe3o de dados que elimina metade das op\xe7\xf5es a cada passo, como na ",(0,r.jsx)(n.strong,{children:"busca bin\xe1ria"}),", voc\xea pode identificar que \xe9 ",(0,r.jsx)(n.strong,{children:"O(log n)"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"on--complexidade-linear-",children:(0,r.jsx)(n.strong,{children:"O(n) \u2013 Complexidade Linear \u2192"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:'"Ler um livro do come\xe7o ao fim sem pular p\xe1ginas."'})}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83e\udde0 Explicado usando a T\xe9cnica Feynman"})}),"\n",(0,r.jsxs)(n.p,{children:["Imagine que voc\xea tem uma fila de pessoas esperando para fazer uma tarefa. Se a pessoa na frente terminar, ela chama a pr\xf3xima, e assim por diante, at\xe9 que todos tenham feito a tarefa. O tempo necess\xe1rio para todos fazerem a tarefa depende diretamente de quantas pessoas est\xe3o na fila. Se houver mais pessoas na fila, o tempo total aumenta na mesma propor\xe7\xe3o.\nEsse \xe9 o conceito de ",(0,r.jsx)(n.strong,{children:"O(n)"}),": o tempo de execu\xe7\xe3o aumenta linearmente com o tamanho da entrada.\nO n\xfamero de opera\xe7\xf5es que o algoritmo realiza aumenta conforme o n\xfamero de itens que ele precisa processar."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83e\uddd0 Exemplo Pr\xe1tico"})}),"\n",(0,r.jsx)(n.p,{children:"Passo a passo:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Voc\xea tem um array de 10 elementos e quer somar todos os n\xfameros nele."}),"\n",(0,r.jsx)(n.li,{children:"Voc\xea come\xe7a do primeiro elemento e vai at\xe9 o \xfaltimo, somando um por um."}),"\n",(0,r.jsx)(n.li,{children:"O n\xfamero de passos (opera\xe7\xf5es) que o algoritmo faz \xe9 igual ao n\xfamero de elementos no array."}),"\n",(0,r.jsx)(n.li,{children:"Portanto, se o array tiver 100 elementos, o algoritmo far\xe1 100 opera\xe7\xf5es; se tiver 1.000, ele far\xe1 1.000 opera\xe7\xf5es."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Outro exemplo:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Buscar um elemento em um array n\xe3o ordenado"}),": O algoritmo precisa olhar cada elemento at\xe9 encontrar o que est\xe1 procurando."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Imprimir todos os elementos de um array"}),": O tempo de execu\xe7\xe3o aumenta com o n\xfamero de elementos que voc\xea precisa imprimir."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u23f0 Sobre Complexidade Temporal"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"O(n)"})," \xe9 linear. O tempo de execu\xe7\xe3o cresce na mesma propor\xe7\xe3o que o tamanho da entrada.\nSe voc\xea tem 1.000 itens para processar, o algoritmo far\xe1 1.000 opera\xe7\xf5es, e se voc\xea tiver 10.000 itens, far\xe1 10.000 opera\xe7\xf5es."]}),"\n",(0,r.jsxs)(n.p,{children:["\u23f0 ",(0,r.jsx)(n.strong,{children:"Exemplos de O(n) - Temporal"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Soma de todos os elementos de um array"}),": O algoritmo percorre cada elemento uma vez para som\xe1-los."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Buscar um item em um array n\xe3o ordenado"}),": O algoritmo verifica cada elemento at\xe9 encontrar o item."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Imprimir cada valor de uma lista"}),": A opera\xe7\xe3o de imprimir cada item exige uma opera\xe7\xe3o por item na lista."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83d\udc69\ud83c\udffc\u200d\ud83d\ude80 Sobre Complexidade Espacial"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Armazenar c\xf3pias dos elementos de uma lista"}),": Se o algoritmo precisa criar uma nova lista para armazenar os elementos, o espa\xe7o necess\xe1rio cresce com o n\xfamero de elementos."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Contar o n\xfamero de vezes que um valor aparece em um array"}),": Para cada item que o algoritmo verifica, ele precisa de um pouco mais de mem\xf3ria para armazenar a contagem."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83d\udd0d Como identificar se \xe9 O(n)?"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Como identificar"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:["Se o algoritmo faz uma opera\xe7\xe3o para cada item na entrada (ou em uma parte significativa da entrada), o tempo de execu\xe7\xe3o \xe9 ",(0,r.jsx)(n.strong,{children:"O(n)"}),". O n\xfamero de opera\xe7\xf5es cresce proporcionalmente ao tamanho da entrada."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exemplo"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Se voc\xea precisa percorrer uma lista e realizar uma opera\xe7\xe3o em cada item (como somar ou verificar um valor), isso ser\xe1 ",(0,r.jsx)(n.strong,{children:"O(n)"})," porque o n\xfamero de opera\xe7\xf5es aumenta conforme o tamanho da lista."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"on-log-n--complexidade-quasilinear-",children:(0,r.jsx)(n.strong,{children:"O(n log n) \u2013 Complexidade Quasilinear \u2192"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:'"Organizar um baralho dividindo as cartas em pilhas menores e juntando depois."'})}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83e\udde0 Explicado usando a T\xe9cnica Feynman"})}),"\n",(0,r.jsxs)(n.p,{children:["Imagine que voc\xea tem um grande n\xfamero de dados e quer organiz\xe1-los de alguma forma, como em um array. Agora, em vez de olhar para todos os dados de uma vez, voc\xea divide em partes menores e faz algo com essas partes (como orden\xe1-las) para depois juntar tudo de novo.\nEsse processo de dividir, ordenar e juntar faz o tempo de execu\xe7\xe3o crescer de maneira um pouco mais complexa do que um simples ",(0,r.jsx)(n.strong,{children:"O(n)"}),", mas muito mais r\xe1pido do que o ",(0,r.jsx)(n.strong,{children:"O(n\xb2)"}),"."]}),"\n",(0,r.jsx)(n.p,{children:'O "log n" vem do processo de dividir repetidamente os dados em partes menores, e o "n" vem de ter que processar todos os dados ao longo do caminho.'}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83e\uddd0 Exemplo Pr\xe1tico"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Exemplos de algoritmos que usam:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ORDENA\xc7\xc3O (quicksort, mergesort)"}),"\n",(0,r.jsx)(n.li,{children:"DIVIDIR E CONQUISTAR"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Digamos que voc\xea tenha um array de ",(0,r.jsx)(n.strong,{children:"n"})," elementos."]}),"\n",(0,r.jsx)(n.li,{children:"Voc\xea divide esse array em dois subarrays menores at\xe9 que cada subarray tenha um \xfanico elemento."}),"\n",(0,r.jsx)(n.li,{children:"Depois, voc\xea come\xe7a a juntar esses subarrays ordenando-os, de forma que no final voc\xea tenha o array inteiro ordenado."}),"\n",(0,r.jsxs)(n.li,{children:["O tempo para dividir os arrays \xe9 ",(0,r.jsx)(n.strong,{children:"O(log n)"}),", e o tempo para percorrer todos os ",(0,r.jsx)(n.strong,{children:"n"})," elementos enquanto voc\xea faz a ordena\xe7\xe3o \xe9 ",(0,r.jsx)(n.strong,{children:"O(n)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Juntando os dois, temos ",(0,r.jsx)(n.strong,{children:"O(n log n)"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u23f0 Sobre Complexidade Temporal"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"O(n log n)"})," significa que o tempo de execu\xe7\xe3o aumenta conforme o n\xfamero de elementos cresce, mas de uma forma mais controlada do que ",(0,r.jsx)(n.strong,{children:"O(n\xb2)"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"A ordem de grandeza do tempo de execu\xe7\xe3o \xe9 mais eficiente, o que faz esse tipo de algoritmo ser muito \xfatil para problemas grandes, como ordena\xe7\xe3o de dados."}),"\n",(0,r.jsxs)(n.p,{children:["\u23f0 ",(0,r.jsx)(n.strong,{children:"Exemplos de O(n log n) - Temporal"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Merge Sort"}),": Um dos algoritmos mais conhecidos para ordenar dados com ",(0,r.jsx)(n.strong,{children:"O(n log n)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Quick Sort"}),": Outro algoritmo de ordena\xe7\xe3o que tem um desempenho de ",(0,r.jsx)(n.strong,{children:"O(n log n)"}),", mas em alguns casos pode ter desempenho pior se n\xe3o for bem implementado."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83d\udc69\ud83c\udffc\u200d\ud83d\ude80 Sobre Complexidade Espacial"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"O(n log n)"})," pode envolver o uso de mem\xf3ria extra para armazenar os subarrays tempor\xe1rios durante o processo de divis\xe3o e jun\xe7\xe3o.\nDependendo do algoritmo, pode ser necess\xe1rio mais espa\xe7o para armazenar esses dados tempor\xe1rios."]}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udcbe ",(0,r.jsx)(n.strong,{children:"Exemplos de O(n log n) - Espacial"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Merge Sort"}),": Durante o processo de ordena\xe7\xe3o, o ",(0,r.jsx)(n.strong,{children:"Merge Sort"})," precisa de espa\xe7o extra proporcional a ",(0,r.jsx)(n.strong,{children:"O(n)"})," para armazenar subarrays tempor\xe1rios."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Quick Sort"}),": O espa\xe7o extra usado pelo ",(0,r.jsx)(n.strong,{children:"Quick Sort"})," pode ser ",(0,r.jsx)(n.strong,{children:"O(log n)"})," no melhor caso, mas pode ser maior dependendo de como a recurs\xe3o \xe9 realizada."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83d\udd0d Como identificar se \xe9 O(n log n)?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Para identificar se um algoritmo tem ",(0,r.jsx)(n.strong,{children:"O(n log n)"})," de complexidade, \xe9 importante procurar por processos que envolvem dividir um conjunto de dados em partes menores e realizar uma opera\xe7\xe3o sobre cada uma dessas partes, como ordenar.\nEsses algoritmos tendem a ter uma combina\xe7\xe3o de um loop que percorre todos os ",(0,r.jsx)(n.strong,{children:"n"})," dados e um processo de divis\xe3o recursiva ou logar\xedtmica."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Como identificar:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Se voc\xea v\xea uma ",(0,r.jsx)(n.strong,{children:"divis\xe3o repetitiva"})," dos dados, como no caso de ",(0,r.jsx)(n.strong,{children:"Merge Sort"})," ou ",(0,r.jsx)(n.strong,{children:"Quick Sort"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Se cada opera\xe7\xe3o de divis\xe3o tem um custo de ",(0,r.jsx)(n.strong,{children:"O(log n)"}),", mas voc\xea ainda precisa passar por todos os dados ",(0,r.jsx)(n.strong,{children:"n"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Quando o tempo de execu\xe7\xe3o \xe9 uma combina\xe7\xe3o de linear e logar\xedtmica, como ",(0,r.jsx)(n.strong,{children:"n log n"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"on--complexidade-quadr\xe1tica-",children:(0,r.jsx)(n.strong,{children:"O(n\xb2) \u2013 Complexidade Quadr\xe1tica \u2192"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:'"Comparar cada aluno da turma com todos os outros para descobrir quem \xe9 mais alto."'})}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83e\udde0 Explicado usando a T\xe9cnica Feynman"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Viu loop dentro de um loop ou Bubble sort? Pode cravar que \xe9 O(n\xb2)!"}),"\nImagine que voc\xea tem uma lista de pessoas e quer comparar cada uma delas com todas as outras para encontrar pares com algo em comum. No come\xe7o, voc\xea compara a primeira pessoa com todas as outras, depois a segunda com todas as outras (exceto a primeira, porque j\xe1 foi comparada), e assim por diante.\nIsso cria uma cascata de compara\xe7\xf5es, onde cada novo elemento faz o n\xfamero de intera\xe7\xf5es crescer de forma quadr\xe1tica. Se tivermos 10 elementos, fazemos ",(0,r.jsx)(n.strong,{children:"100 compara\xe7\xf5es"}),"; se tivermos 1.000, fazemos ",(0,r.jsx)(n.strong,{children:"1.000.000"}),"!\nIsso explica por que algoritmos ",(0,r.jsx)(n.strong,{children:"O(n\xb2)"})," ficam lentos com entradas grandes."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83e\uddd0 Exemplo Pr\xe1tico"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Voc\xea tem um array de ",(0,r.jsx)(n.strong,{children:"n"})," elementos."]}),"\n",(0,r.jsx)(n.li,{children:"Voc\xea precisa comparar cada elemento com todos os outros."}),"\n",(0,r.jsxs)(n.li,{children:["O primeiro elemento ser\xe1 comparado com ",(0,r.jsx)(n.strong,{children:"n - 1"})," elementos."]}),"\n",(0,r.jsxs)(n.li,{children:["O segundo elemento ser\xe1 comparado com ",(0,r.jsx)(n.strong,{children:"n - 2"})," elementos."]}),"\n",(0,r.jsxs)(n.li,{children:["Isso se repete at\xe9 o \xfaltimo elemento, criando ",(0,r.jsx)(n.strong,{children:"n \xd7 n"})," opera\xe7\xf5es."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u23f0 Sobre Complexidade Temporal"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"O(n\xb2)"})," significa que \xe0 medida que ",(0,r.jsx)(n.strong,{children:"n"})," cresce, o tempo de execu\xe7\xe3o cresce proporcionalmente ao quadrado desse n\xfamero.\nIsso significa que um pequeno aumento no tamanho do input pode resultar em um aumento ",(0,r.jsx)(n.strong,{children:"exponencial"})," no tempo de execu\xe7\xe3o."]}),"\n",(0,r.jsxs)(n.p,{children:["\u23f0 ",(0,r.jsx)(n.strong,{children:"Exemplos de O(n\xb2) - Temporal"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Bubble Sort"}),": Cada elemento precisa ser comparado com todos os outros."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Selection Sort"}),": Busca pelo menor elemento e o troca de posi\xe7\xe3o v\xe1rias vezes."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Algoritmo ing\xeanuo para encontrar pares duplicados"}),": Um loop dentro de outro loop para verificar se existem elementos iguais."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83d\udc69\ud83c\udffc\u200d\ud83d\ude80 Sobre Complexidade Espacial"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"O(n\xb2)"})," pode, em alguns casos, exigir uma grande quantidade de mem\xf3ria extra se for necess\xe1rio armazenar pares, matrizes ou listas auxiliares durante as opera\xe7\xf5es."]}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udcbe ",(0,r.jsx)(n.strong,{children:"Exemplos de O(n\xb2) - Espacial"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multiplica\xe7\xe3o de Matrizes Ing\xeanua"}),": Cada c\xe9lula da matriz resultante requer m\xfaltiplas itera\xe7\xf5es pelos dados."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cria\xe7\xe3o de tabelas auxiliares"})," para armazenar rela\xe7\xf5es entre elementos (exemplo: uma tabela de adjac\xeancia em grafos)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83d\udd0d Como identificar se \xe9 O(n\xb2)?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Para identificar se um algoritmo tem ",(0,r.jsx)(n.strong,{children:"O(n\xb2)"})," de complexidade, procure por ",(0,r.jsx)(n.strong,{children:"loops aninhados"})," onde cada itera\xe7\xe3o percorre toda a entrada para cada elemento."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Como identificar:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Se h\xe1 ",(0,r.jsx)(n.strong,{children:"dois loops aninhados"})," que percorrem o mesmo conjunto de dados."]}),"\n",(0,r.jsxs)(n.li,{children:["Se a quantidade de opera\xe7\xf5es cresce ",(0,r.jsx)(n.strong,{children:"muito r\xe1pido"})," conforme o input aumenta."]}),"\n",(0,r.jsxs)(n.li,{children:["Se um problema envolve comparar ",(0,r.jsx)(n.strong,{children:"todos os elementos com todos os outros"})," (como em alguns algoritmos de ordena\xe7\xe3o)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h1,{id:"outras-nota\xe7\xf5es-do-big-o-menos-comuns",children:"Outras nota\xe7\xf5es do BIG O (menos comuns):"}),"\n",(0,r.jsx)(n.h2,{id:"o2\u207f--complexidade-exponencial-",children:(0,r.jsx)(n.strong,{children:"O(2\u207f) \u2013 Complexidade Exponencial \u2192"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:'"Testar todas as formas poss\xedveis de resolver um cubo m\xe1gico."'})}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83e\udde0 Explicado usando a T\xe9cnica Feynman"})}),"\n",(0,r.jsx)(n.p,{children:"Imagine que voc\xea tem um cofre e quer descobrir a senha, mas n\xe3o sabe quantos n\xfameros precisa testar."}),"\n",(0,r.jsx)(n.p,{children:"Cada vez que voc\xea adiciona um d\xedgito a mais, o n\xfamero de possibilidades dobra. Se a senha tiver 1 d\xedgito, h\xe1 2 possibilidades (0 ou 1)."}),"\n",(0,r.jsx)(n.p,{children:"Se tiver 2 d\xedgitos, h\xe1 4 possibilidades (00, 01, 10, 11). Com 3 d\xedgitos, j\xe1 s\xe3o 8 possibilidades."}),"\n",(0,r.jsx)(n.p,{children:"Assim, conforme o n\xfamero de elementos aumenta, o n\xfamero de opera\xe7\xf5es cresce exponencialmente, dobrando a cada nova unidade adicionada."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83e\uddd0 Exemplo Pr\xe1tico"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Voc\xea precisa gerar ",(0,r.jsx)(n.strong,{children:"todas as combina\xe7\xf5es poss\xedveis"})," de um conjunto."]}),"\n",(0,r.jsxs)(n.li,{children:["Se h\xe1 ",(0,r.jsx)(n.strong,{children:"n elementos"}),", cada um pode estar ",(0,r.jsx)(n.strong,{children:"presente ou ausente"})," na combina\xe7\xe3o."]}),"\n",(0,r.jsxs)(n.li,{children:["Isso cria ",(0,r.jsx)(n.strong,{children:"2\u207f possibilidades"})," de subconjuntos."]}),"\n",(0,r.jsxs)(n.li,{children:["Para ",(0,r.jsx)(n.strong,{children:"n = 3"}),", as combina\xe7\xf5es poss\xedveis seriam:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"{}"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"{A}"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"{B}"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"{C}"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"{A, B}"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"{A, C}"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"{B, C}"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"{A, B, C}"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Para ",(0,r.jsx)(n.strong,{children:"n = 4"}),", j\xe1 ter\xedamos ",(0,r.jsx)(n.strong,{children:"16 possibilidades"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Para ",(0,r.jsx)(n.strong,{children:"n = 10"}),", j\xe1 seriam ",(0,r.jsx)(n.strong,{children:"1024 possibilidades"}),". \ud83d\ude2f"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u23f0 Sobre Complexidade Temporal"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"O(2\u207f)"})," significa que, conforme o input cresce, o tempo de execu\xe7\xe3o ",(0,r.jsx)(n.strong,{children:"dobra"})," a cada novo elemento. Isso torna esses algoritmos extremamente ineficientes para inputs grandes."]}),"\n",(0,r.jsxs)(n.p,{children:["\u23f0 ",(0,r.jsx)(n.strong,{children:"Exemplos de O(2\u207f) - Temporal"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Problema do subconjunto"}),": Gerar todas as combina\xe7\xf5es poss\xedveis de um conjunto."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Problema da Mochila (For\xe7a Bruta)"}),": Testar todas as combina\xe7\xf5es poss\xedveis de itens para encontrar o melhor conjunto."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fibonacci Recursivo (sem otimiza\xe7\xe3o)"}),": A vers\xe3o ing\xeanua da sequ\xeancia de Fibonacci, onde cada chamada recursiva cria duas novas chamadas."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83d\udc69\ud83c\udffc\u200d\ud83d\ude80 Sobre Complexidade Espacial"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"O(2\u207f)"})," pode exigir ",(0,r.jsx)(n.strong,{children:"muito espa\xe7o na mem\xf3ria"}),", especialmente quando todas as possibilidades precisam ser armazenadas antes da execu\xe7\xe3o."]}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udcbe ",(0,r.jsx)(n.strong,{children:"Exemplos de O(2\u207f) - Espacial"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Armazenamento de todas as combina\xe7\xf5es de um conjunto"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backtracking em problemas de busca exaustiva"}),", onde todas as op\xe7\xf5es precisam ser mantidas na pilha de chamadas da recurs\xe3o."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83d\udd0d Como identificar se \xe9 O(2\u207f)?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Se o n\xfamero de opera\xe7\xf5es ",(0,r.jsx)(n.strong,{children:"dobra"})," a cada novo elemento adicionado, voc\xea provavelmente est\xe1 lidando com ",(0,r.jsx)(n.strong,{children:"O(2\u207f)"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Como identificar:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Se o algoritmo envolve ",(0,r.jsx)(n.strong,{children:"gerar todas as combina\xe7\xf5es poss\xedveis"})," de um conjunto."]}),"\n",(0,r.jsxs)(n.li,{children:["Se a solu\xe7\xe3o usa ",(0,r.jsx)(n.strong,{children:"recurs\xe3o exponencial"}),", onde cada chamada gera ",(0,r.jsx)(n.strong,{children:"duas ou mais chamadas recursivas"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Se a quantidade de opera\xe7\xf5es cresce ",(0,r.jsx)(n.strong,{children:"extremamente r\xe1pido"}),", tornando o algoritmo invi\xe1vel para inputs grandes."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"on--complexidade-de-raiz-quadrada-",children:(0,r.jsx)(n.strong,{children:"O(\u221an) \u2013 Complexidade de Raiz Quadrada \u2192"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:'"Subir uma escada pulando degraus para chegar mais r\xe1pido ao topo."'})}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83e\udde0 Explicado usando a T\xe9cnica Feynman"})}),"\n",(0,r.jsxs)(n.p,{children:["Imagine que voc\xea precisa encontrar um n\xfamero espec\xedfico dentro de ",(0,r.jsx)(n.strong,{children:"n"})," elementos, mas, ao inv\xe9s de verificar todos um por um (",(0,r.jsx)(n.strong,{children:"O(n)"}),"), voc\xea pode ",(0,r.jsx)(n.strong,{children:"pular"})," de um grupo para outro, reduzindo drasticamente a quantidade de verifica\xe7\xf5es.\nPor exemplo, se voc\xea tivesse ",(0,r.jsx)(n.strong,{children:"100 elementos"}),", ao inv\xe9s de checar todos, voc\xea poderia ",(0,r.jsx)(n.strong,{children:"dividir em blocos"})," e testar apenas ",(0,r.jsx)(n.strong,{children:"\u221a100 = 10 elementos"}),".\nEsse comportamento aparece em problemas onde \xe9 poss\xedvel reduzir a busca para a raiz quadrada do input."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83e\uddd0 Exemplo Pr\xe1tico"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Voc\xea precisa encontrar um n\xfamero ",(0,r.jsx)(n.strong,{children:"primo"})," menor que ",(0,r.jsx)(n.strong,{children:"n"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Ao inv\xe9s de testar divisibilidade at\xe9 ",(0,r.jsx)(n.strong,{children:"n"}),", voc\xea s\xf3 precisa verificar at\xe9 ",(0,r.jsx)(n.strong,{children:"\u221an"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Exemplo: Para verificar se ",(0,r.jsx)(n.strong,{children:"37 \xe9 primo"}),", voc\xea n\xe3o precisa testar divisibilidade por todos os n\xfameros at\xe9 37, basta testar at\xe9 ",(0,r.jsx)(n.strong,{children:"\u221a37 \u2248 6"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Se nenhum n\xfamero at\xe9 6 divide 37, ent\xe3o 37 \xe9 primo."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u23f0 Sobre Complexidade Temporal"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"O(\u221an)"})," significa que o tempo de execu\xe7\xe3o cresce com a raiz quadrada do tamanho da entrada.\nIsso \xe9 mais eficiente que ",(0,r.jsx)(n.strong,{children:"O(n)"})," para entradas grandes."]}),"\n",(0,r.jsxs)(n.p,{children:["\u23f0 ",(0,r.jsx)(n.strong,{children:"Exemplos de O(\u221an) - Temporal"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Verifica\xe7\xe3o de primalidade"}),": Testar se um n\xfamero \xe9 primo."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Encontrar todos os divisores de um n\xfamero"}),": Voc\xea s\xf3 precisa testar at\xe9 a raiz quadrada do n\xfamero."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83d\udc69\ud83c\udffc\u200d\ud83d\ude80 Sobre Complexidade Espacial"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"O(\u221an)"})," geralmente n\xe3o requer muito espa\xe7o adicional, pois a maioria das opera\xe7\xf5es pode ser feita in-place."]}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udcbe ",(0,r.jsx)(n.strong,{children:"Exemplos de O(\u221an) - Espacial"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Armazenamento de divisores"}),": Em alguns casos, voc\xea pode precisar armazenar os divisores encontrados."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Buffer tempor\xe1rio"}),": Para algumas opera\xe7\xf5es matem\xe1ticas que trabalham com blocos de tamanho \u221an."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud83d\udd0d Como identificar se \xe9 O(\u221an)?"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Como identificar:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Se o algoritmo trabalha com ",(0,r.jsx)(n.strong,{children:"blocos"})," ou ",(0,r.jsx)(n.strong,{children:"grupos"})," de tamanho \u221an."]}),"\n",(0,r.jsxs)(n.li,{children:["Se envolve ",(0,r.jsx)(n.strong,{children:"opera\xe7\xf5es matem\xe1ticas"})," onde voc\xea s\xf3 precisa verificar at\xe9 a raiz quadrada do n\xfamero."]}),"\n",(0,r.jsxs)(n.li,{children:["Se h\xe1 uma ",(0,r.jsx)(n.strong,{children:"otimiza\xe7\xe3o"})," que permite pular verifica\xe7\xf5es baseada na raiz quadrada do tamanho da entrada."]}),"\n"]}),"\n"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>d});var s=o(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);